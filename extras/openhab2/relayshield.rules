import org.joda.time.DateTime

val String relayshieldsystemname = "Relayshield"

// define name for logging
val String relayshieldloggingname = "relayshield"

// define address for notifications
val String notificationto = "greenthegarden@gmail.com"

// define email address to send messages
val String mailto = "cutlervufamily@gmail.com"

var int relayshieldUpdateAge = 5	// minutes

rule "Last connected timestamp"
when
	Item RelayshieldConnectedMessage received update
then
	postUpdate(RelayshieldLastConnected, new DateTimeType())
	postUpdate(RelayshieldLastStatusUpdate, new DateTimeType())
	RelayshieldState.sendCommand(ON)
end

rule "Update status interval"
when
	Item RelayshieldStatusInterval changed
then
	var Number newUpdateAge = RelayshieldStatusInterval.state as DecimalType
	relayshieldUpdateAge = (newUpdateAge / 60000).intValue	// convert to minutes and update
end

rule "Status update timestamp"
when
	Item RelayshieldUptimeRaw received update
then
	postUpdate(RelayshieldLastStatusUpdate, new DateTimeType())
end

rule "Relayshield connected"
when
	// update every minute
	Time cron "0 0/1 * * * ?"
then
//	if (RelayshieldLastStatusUpdate.state == Undefined || RelayshieldLastStatusUpdate.state == NULL) {
//	if (RelayshieldLastStatusUpdate.state == NULL) {
//		logInfo(relayshieldloggingname, "No status update")
//	} else {
		var DateTime dateTime = new DateTime((RelayshieldLastStatusUpdate.state as DateTimeType).calendar.timeInMillis)
		if (dateTime.plusMinutes(2*relayshieldUpdateAge+1).isBefore(now)) {
			// is more than <2*updateAge+1> minutes old
  			RelayshieldState.sendCommand(OFF)
		}
//	}
end

rule "Relayshield State change"
when
	Item RelayshieldState changed
then
	val String message = "Relayshield " + RelayshieldState.state.toString + " at " + new DateTime().toString
	logInfo(relayshieldloggingname, message)
	sendNotification(notificationto, message)
end


//	val String message = "Piology offline" + " at " + new DateTime().toString
//	logInfo(defaultloggingname, message)
//	sendNotification(notificationto, message)
//	sendMail(mailto, message, message)


rule "Relayshield Relay State"
when
	Item RelayshieldRelayState changed
then
//	lock.lock()
//    try {
    	logInfo("relayshield", "RelayshieldRelayState state changed. RelayshieldRelayState.state: [{}].", RelayshieldRelayState.state)

		val String[] messageParts = RelayshieldRelayState.state.toString.split(",");
		val String relay = messageParts.get(0);
		val String state = messageParts.get(1);

		if (state == "0") {		// relay turned off
			if (relay == "1") {
				RelayshieldRelay1State.sendCommand(OFF)
			}
			if (relay == "2") {
				RelayshieldRelay2State.sendCommand(OFF)
			}
			if (relay == "3") {
				RelayshieldRelay3State.sendCommand(OFF)
			}
			if (relay == "4") {
				RelayshieldRelay4State.sendCommand(OFF)
			}
			var String message = relayshieldsystemname + ": " + "relay " + relay + " off"
			logInfo(relayshieldloggingname, message)
			sendNotification(notificationto, message)
		} else {		// relay was turned on
			if (relay == "1") {
				RelayshieldRelay1State.sendCommand(ON)
			}
			if (relay == "2") {
				RelayshieldRelay2State.sendCommand(ON)
			}
			if (relay == "3") {
				RelayshieldRelay3State.sendCommand(ON)
			}
			if (relay == "4") {
				RelayshieldRelay4State.sendCommand(ON)
			}
			var String message = relayshieldsystemname + ": " + "relay " + relay + " on"
			logInfo(relayshieldloggingname, message)
			sendNotification(notificationto, message)

		}
//	} finally {
//	   	lock.unlock()
//	}
end

rule "Records last relay 1 on and off times"
when
	Item RelayshieldRelay1State received command
then
	if (receivedCommand == ON) {
  		postUpdate(RelayshieldRelay1LastOn, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("1,1")
  	} else {
  		postUpdate(RelayshieldRelay1LastOff, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("1,0")
  	}
end

rule "Records last relay 2 on and off times"
when
	Item RelayshieldRelay2State received command
then
	if (receivedCommand == ON) {
  		postUpdate(RelayshieldRelay2LastOn, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("2,1")
  	} else {
  		postUpdate(RelayshieldRelay2LastOff, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("2,0")
  	}
end

rule "Records last relay 3 on and off times"
when
	Item RelayshieldRelay3State received command
then
	if (receivedCommand == ON) {
  		postUpdate(RelayshieldRelay3LastOn, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("3,1")
  	} else {
  		postUpdate(RelayshieldRelay3LastOff, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("3,0")

  	}
end

rule "Records last relay 4 on and off times"
when
 	Item RelayshieldRelay4State received command
then
	if (receivedCommand == ON) {
  		postUpdate(RelayshieldRelay4LastOn, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("4,1")
  	} else {
  		postUpdate(RelayshieldRelay4LastOff, new DateTimeType())
  		RelayshieldRelayControl.sendCommand("4,0")
  	}
end

//rule "Switch relay 1 on daily at 2130"
//when
//	Time cron "0 30 21 * * ?"
//then
//	RelayshieldRelay1State.sendCommand(ON)
//end

//rule "Switch relay 4 on daily at 2200"
//when
//	Time cron "0 0 22 * * ?"
//then
//	RelayshieldRelay4State.sendCommand(ON)
//end

//rule "Switch relay 1 off daily at 0000"
//when
//	Time cron "0 0 0 * * ?"
//then
//	RelayshieldRelay1State.sendCommand(OFF)
//end

//rule "Switch relays 1 and 4 off daily at 0800"
//when
//	Time cron "0 0 8 * * ?"
//then
//	RelayshieldRelay1State.sendCommand(OFF)
//	RelayshieldRelay4State.sendCommand(OFF)
//end
